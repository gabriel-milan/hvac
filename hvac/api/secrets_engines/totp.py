#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""TOTP methods module."""
from hvac import exceptions, utils
from hvac.api.vault_api_base import VaultApiBase

DEFAULT_MOUNT_POINT = "totp"


class TOTP (VaultApiBase):
    """TOTP Secrets Engine (API).
    Reference: https://www.vaultproject.io/api/secret/totp/index.html
    """

    def create_key(
        self,
        name,
        generate=False,
        exported=True,
        key_size=20,
        url="",
        key="",  # required - if generate is false and url is empty
        issuer="",  # required - if generate is true
        account_name="",  # required - if generate is true
        period=30,
        algorithm="sha1",
        digits=6,
        skew=1,
        qr_size=200,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Creates or updates a key definition.

        Supported methods:
            POST: /{mount_point}/keys/:name. Produces: 200 application/json


        :param name: Specifies the name of the key to create. This is specified as part of the URL.
        :type name: str
        :param generate: Specifies if a key should be generated by Vault or if a key is being passed from another service.
        :type generate: bool
        :param exported: Specifies if a QR code and url are returned upon generating a key. Only used if generate is true.
        :type exported: bool
        :param key_size: Specifies the size in bytes of the Vault generated key. Only used if generate is true.
        :type key_size: int
        :param url: Specifies the TOTP key url string that can be used to configure a key. Only used if generate is false.
        :type url: str
        :param key: Specifies the master key used to generate a TOTP code. Only used if generate is false.
        :type key: str
        :param issuer: Specifies the name of the key's issuing organization.
        :type issuer: str
        :param account_name: Specifies the name of the account associated with the key.
        :type account_name: str
        :param period: Specifies the length of time in seconds used to generate a counter for the TOTP code calculation.
        :type period: int
        :param algorithm: Specifies the hashing algorithm used to generate the TOTP code. Options include "SHA1", "SHA256" and "SHA512".
        :type algorithm: str
        :param digits: Specifies the number of digits in the generated TOTP code. This value can be set to 6 or 8.
        :type digits: int
        :param skew: Specifies the number of delay periods that are allowed when validating a TOTP code. This value can be either 0 or 1.
            Only used if generate is true.
        :type skew: int
        :param qr_size: Specifies the pixel size of the square QR code when generating a new key. Only used if generate is true and
            exported is true. If this value is 0, a QR code will not be returned.
        :type qr_size: int
        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        params = {
            "generate": generate,
            "exported": exported,
            "key_size": key_size,
            "url": url,
            "key": key,
            "issuer": issuer,
            "account_name": account_name,
            "period": period,
            "algorithm": algorithm,
            "digits": digits,
            "skew": skew,
            "qr_size": qr_size,
        }
        api_path = utils.format_url(
            "/v1/{mount_point}/keys/{name}", mount_point=mount_point, name=name
        )
        return self._adapter.post(
            url=api_path,
            json=params,
        )

    def read_key(
        self,
        name,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Queries the key definition.

        Supported methods:
            GET: /{mount_point}/keys/:name. Produces: 200 application/json


        :param name: Specifies the name of the key to read. This is specified as part of the URL.
        :type name: str
        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        api_path = utils.format_url(
            "/v1/{mount_point}/keys/{name}", mount_point=mount_point, name=name
        )
        return self._adapter.get(
            url=api_path,
        )

    def list_keys(
        self,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Lists the keys.

        Supported methods:
            LIST: /{mount_point}/keys/. Produces: 200 application/json


        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        api_path = utils.format_url(
            "/v1/{mount_point}/keys", mount_point=mount_point
        )
        return self._adapter.list(
            url=api_path,
        )

    def delete_key(
        self,
        name,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Deletes the key definition.

        Supported methods:
            DELETE: /{mount_point}/keys/:name. Produces: 204 (empty body)


        :param name: Specifies the name of the key to delete. This is specified as part of the URL.
        :type name: str
        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        api_path = utils.format_url(
            "/v1/{mount_point}/keys/{name}", mount_point=mount_point, name=name
        )
        return self._adapter.delete(
            url=api_path,
        )

    def generate_code(
        self,
        name,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Generates a new time-based one-time use password based on the named key.

        Supported methods:
            GET: /{mount_point}/code/:name. Produces: 200 application/json


        :param name: Specifies the name of the key to generate a code for. This is specified as part of the URL.
        :type name: str
        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        api_path = utils.format_url(
            "/v1/{mount_point}/code/{name}", mount_point=mount_point, name=name
        )
        return self._adapter.get(
            url=api_path,
        )

    def validate_code(
        self,
        name,
        code,
        mount_point=DEFAULT_MOUNT_POINT,
    ):
        """
        Validates a time-based one-time use password generated from the named key.

        Supported methods:
            POST: /{mount_point}/code/:name. Produces: 200 application/json


        :param name: Specifies the name of the key to validate a code for. This is specified as part of the URL.
        :type name: str
        :param code: Specifies the password you want to validate.
        :type code: str
        :param mount_point: The "path" the secret engine was mounted on.
        :type mount_point: str | unicode
        :return: The JSON response of the request.
        :rtype: dict
        """
        params = {
            "code": code,
        }
        api_path = utils.format_url(
            "/v1/{mount_point}/code/{name}", mount_point=mount_point, name=name
        )
        return self._adapter.post(
            url=api_path,
            json=params,
        )
